/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A list of redirect definitions.
 */
export type Redirects = {
  /**
   * A pattern that matches each incoming pathname (excluding querystring).
   */
  source: string;
  /**
   * A location destination defined as an absolute pathname or external URL.
   */
  destination: string;
  /**
   * A boolean to toggle between permanent and temporary redirect. When `true`, the status code is `308`. When `false` the status code is `307`.
   */
  permanent?: boolean;
  statusCode?: number;
  /**
   * An array of requirements that are needed to match
   */
  has?: (
    | {
        /**
         * The type of request element to check
         */
        type: "host";
        /**
         * A regular expression used to match the value. Named groups can be used in the destination
         */
        value: string;
      }
    | {
        /**
         * The type of request element to check
         */
        type: "header" | "cookie" | "query";
        /**
         * The name of the element contained in the particular type
         */
        key: string;
        /**
         * A regular expression used to match the value. Named groups can be used in the destination
         */
        value?: string;
      }
  )[];
  /**
   * An array of requirements that are needed to match
   */
  missing?: (
    | {
        /**
         * The type of request element to check
         */
        type: "host";
        /**
         * A regular expression used to match the value. Named groups can be used in the destination
         */
        value: string;
      }
    | {
        /**
         * The type of request element to check
         */
        type: "header" | "cookie" | "query";
        /**
         * The name of the element contained in the particular type
         */
        key: string;
        /**
         * A regular expression used to match the value. Named groups can be used in the destination
         */
        value?: string;
      }
  )[];
}[];

export interface Vercel {
  /**
   * Ignored. Can be set to get completions, validations and documentation in some editors.
   */
  $schema?: string;
  /**
   * Aliases that will get assigned when the deployment is `READY` and the target is `production`. The client needs to make a `GET` request to its API to ensure the assignment
   */
  alias?: string | string[];
  /**
   * An object containing another object with information to be passed to the Build Process
   */
  build?: {
    /**
     * An object containing the deployment's environment variable names and values to be passed to Builds. Secrets can be referenced by prefixing the value with `@`
     */
    env?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".+".
       */
      [k: string]: string;
    };
  };
  /**
   * A list of build descriptions whose src references valid source files.
   */
  builds?: {
    /**
     * Optionally, an object including arbitrary metadata to be passed to the Builder
     */
    config?: {
      [k: string]: unknown;
    };
    /**
     * A glob expression or pathname. If more than one file is resolved, one build will be created per matched file. It can include `*` and `**`
     */
    src?: string;
    /**
     * An npm module to be installed by the build process. It can include a semver compatible version (e.g.: `@org/proj@1`)
     */
    use: string;
  }[];
  /**
   * When set to `true`, all HTML files and Serverless Functions will have their extension removed. When visiting a path that ends with the extension, a 308 response will redirect the client to the extensionless path.
   */
  cleanUrls?: boolean;
  /**
   * An object containing the deployment's environment variable names and values. Secrets can be referenced by prefixing the value with `@`
   */
  env?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".+".
     */
    [k: string]: string;
  };
  /**
   * An object describing custom options for your Serverless Functions. Each key must be glob pattern that matches the paths of the Serverless Functions you would like to customize (like `api/*.js` or `api/test.js`).
   */
  functions?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^.{1,256}$".
     */
    [k: string]: {
      /**
       * A glob pattern to match files that should be excluded from your Serverless Function. If you’re using a Community Runtime, the behavior might vary.
       */
      excludeFiles?: string;
      /**
       * A glob pattern to match files that should be included in your Serverless Function. If you’re using a Community Runtime, the behavior might vary.
       */
      includeFiles?: string;
      /**
       * An integer defining how long your Serverless Function should be allowed to run on every request in seconds (between 1 and the maximum limit of your plan).
       */
      maxDuration?: number;
      /**
       * An integer defining the memory your Serverless Function should be provided with (between 128 and 3008, in intervals of 64).
       */
      memory?:
        | 128
        | 192
        | 256
        | 320
        | 384
        | 448
        | 512
        | 576
        | 640
        | 704
        | 768
        | 832
        | 896
        | 960
        | 1024
        | 1088
        | 1152
        | 1216
        | 1280
        | 1344
        | 1408
        | 1472
        | 1536
        | 1600
        | 1664
        | 1728
        | 1792
        | 1856
        | 1920
        | 1984
        | 2048
        | 2112
        | 2176
        | 2240
        | 2304
        | 2368
        | 2432
        | 2496
        | 2560
        | 2624
        | 2688
        | 2752
        | 2816
        | 2880
        | 2944
        | 3008;
      /**
       * The npm package name of a Runtime, including its version
       */
      runtime?: string;
    };
  };
  github?: {
    /**
     * When set to `false`, Vercel for GitHub will not deploy the given project regardless of the GitHub app being installed.
     */
    autoAlias?: boolean;
    /**
     * When set to `false`, Vercel for GitHub will always build pushes in sequence without cancelling a build for the most recent commit.
     */
    autoJobCancelation?: boolean;
    /**
     * When set to false, Vercel for GitHub will not apply the alias upon merge.
     */
    enabled?: boolean;
    /**
     * When set to `true`, Vercel for GitHub will stop commenting on pull requests and commits.
     */
    silent?: boolean;
    [k: string]: unknown;
  };
  /**
   * A list of header definitions.
   */
  headers?: {
    /**
     * A pattern that matches each incoming pathname (excluding querystring)
     */
    source: string;
    /**
     * An array of key/value pairs representing each response header.
     */
    headers: {
      key: string;
      value: string;
    }[];
    /**
     * An array of requirements that are needed to match
     */
    has?: (
      | {
          /**
           * The type of request element to check
           */
          type: "host";
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value: string;
        }
      | {
          /**
           * The type of request element to check
           */
          type: "header" | "cookie" | "query";
          /**
           * The name of the element contained in the particular type
           */
          key: string;
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value?: string;
        }
    )[];
    /**
     * An array of requirements that are needed to match
     */
    missing?: (
      | {
          /**
           * The type of request element to check
           */
          type: "host";
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value: string;
        }
      | {
          /**
           * The type of request element to check
           */
          type: "header" | "cookie" | "query";
          /**
           * The name of the element contained in the particular type
           */
          key: string;
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value?: string;
        }
    )[];
  }[];
  /**
   * A name for the deployment
   */
  name?: string;
  /**
   * Whether a deployment's source and logs are available publicly
   */
  public?: boolean;
  redirects?: Redirects;
  /**
   * An array of the regions the deployment's Serverless Functions should be deployed to
   */
  regions?: string[];
  /**
   * A list of rewrite definitions.
   */
  rewrites?: {
    /**
     * A pattern that matches each incoming pathname (excluding querystring).
     */
    source: string;
    /**
     * An absolute pathname to an existing resource or an external URL.
     */
    destination: string;
    /**
     * An array of requirements that are needed to match
     */
    has?: (
      | {
          /**
           * The type of request element to check
           */
          type: "host";
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value: string;
        }
      | {
          /**
           * The type of request element to check
           */
          type: "header" | "cookie" | "query";
          /**
           * The name of the element contained in the particular type
           */
          key: string;
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value?: string;
        }
    )[];
    /**
     * An array of requirements that are needed to match
     */
    missing?: (
      | {
          /**
           * The type of request element to check
           */
          type: "host";
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value: string;
        }
      | {
          /**
           * The type of request element to check
           */
          type: "header" | "cookie" | "query";
          /**
           * The name of the element contained in the particular type
           */
          key: string;
          /**
           * A regular expression used to match the value. Named groups can be used in the destination
           */
          value?: string;
        }
    )[];
  }[];
  /**
   * A list of routes objects used to rewrite paths to point towards other internal or external paths
   */
  routes?: (
    | {
        src: string;
        dest?: string;
        headers?: {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` "^.{1,256}$".
           */
          [k: string]: string;
        };
        methods?: string[];
        caseSensitive?: boolean;
        important?: boolean;
        user?: boolean;
        continue?: boolean;
        override?: boolean;
        check?: boolean;
        status?: number;
        locale?: {
          redirect?: {
            /**
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "^.{1,256}$".
             */
            [k: string]: string;
          };
          value?: string;
          path?: string;
          cookie?: string;
          default?: string;
        };
        middleware?: number;
        /**
         * An array of requirements that are needed to match
         */
        has?: (
          | {
              /**
               * The type of request element to check
               */
              type: "host";
              /**
               * A regular expression used to match the value. Named groups can be used in the destination
               */
              value: string;
            }
          | {
              /**
               * The type of request element to check
               */
              type: "header" | "cookie" | "query";
              /**
               * The name of the element contained in the particular type
               */
              key: string;
              /**
               * A regular expression used to match the value. Named groups can be used in the destination
               */
              value?: string;
            }
        )[];
        /**
         * An array of requirements that are needed to match
         */
        missing?: (
          | {
              /**
               * The type of request element to check
               */
              type: "host";
              /**
               * A regular expression used to match the value. Named groups can be used in the destination
               */
              value: string;
            }
          | {
              /**
               * The type of request element to check
               */
              type: "header" | "cookie" | "query";
              /**
               * The name of the element contained in the particular type
               */
              key: string;
              /**
               * A regular expression used to match the value. Named groups can be used in the destination
               */
              value?: string;
            }
        )[];
      }
    | {
        handle: "error" | "filesystem" | "hit" | "miss" | "resource" | "rewrite";
      }
  )[];
  /**
   * This property determines the scope (user or team) under which the project will be deployed by Vercel CLI.
   */
  scope?: string;
  /**
   * When `false`, visiting a path that ends with a forward slash will respond with a `308` status code and redirect to the path without the trailing slash.
   */
  trailingSlash?: boolean;
  version?: number;
  wildcard?: {
    domain: string;
    value: string;
  }[];
}
